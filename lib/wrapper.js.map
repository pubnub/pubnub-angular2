{"version":3,"sources":["wrapper.js"],"names":["Wrapper","label","pubnubInstance","broadcastOn","outputOn","mockingInstance","autoload","initConfig","PubNub","initializeListener","initialize","args","getOriginalInstance","subscribe","enableEventsBroadcast","enableLoad","disableLoad","unsubscribe","self","tm","setTimeout","disableEventsBroadcast","clearTimeout","channel","callback","getHistory","message","push","get","presence","status","error","clean","ReferenceError","attributeName","Object","defineProperty","methodName","apply","arguments"],"mappings":"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","file":"wrapper.js","sourcesContent":["/* global angular PUBNUB */\nimport { Mock } from './mock';\nimport { Broadcast } from './broadcast';\nimport { Output } from './output';\nimport { Autoload } from './autoload';\n\nexport class Wrapper {\n  constructor(label) {\n    this.label = label;\n    this.pubnubInstance = null;\n    this.broadcastOn = new Broadcast();\n    this.outputOn = new Output();\n    this.mockingInstance = new Mock(this.broadcastOn);\n    this.autoload = new Autoload();\n  }\n\n  /**\n   * Initialize the wrapper\n   *\n   * @param {object} initConfig\n   */\n  init(initConfig) {\n    this.pubnubInstance = new PubNub(initConfig);\n    this.mockingInstance.initializeListener(this);\n    this.autoload.initialize(this);\n  }\n\n  /**\n   * Get the name of the instance\n   *\n   * @returns {*|string|null|string}\n   */\n  getLabel() {\n    return this.label;\n  }\n\n  /**\n   * Wrap the subscribe method to enable trigger events to the broadcast\n   *\n   * @param {object} args\n   */\n  subscribe(args) {\n    this.getOriginalInstance().subscribe(args);\n    this.mockingInstance.enableEventsBroadcast(args);\n    this.autoload.enableLoad(args);\n  }\n\n  /**\n   * Wrap the unsubscribe method to disable the trigger events to the broadcast\n   *\n   * @param args\n   */\n  unsubscribe(args) {\n    this.autoload.disableLoad(args);\n    this.outputOn.unsubscribe(args);\n    this.getOriginalInstance().unsubscribe(args);\n    let self = this;\n    let tm = setTimeout(() => {\n      self.mockingInstance.disableEventsBroadcast(args);\n      clearTimeout(tm);\n    }, 1000);\n  }\n\n  /**\n   * Get to receive messages from a channel or a set of channels through a callback\n   *\n   * @param {string|[string]} channel\n   * @param callback\n   */\n  getMessage(channel, callback) {\n    if (this.outputOn.subscribe(channel)) {\n      this.autoload.getHistory(channel, callback);\n    }\n\n    if (callback) {\n      this.broadcastOn.message(channel, (message) => {\n        this.outputOn.push(channel, message);\n        callback(message);\n      });\n    }\n\n    return this.outputOn.get(channel);\n  }\n\n  /**\n   * Get to receive presence information from a channel or a set of channels through a callback\n   *\n   * @param {string|[string]} channel\n   * @param callback\n   */\n  getPresence(channel, callback) {\n    if (this.broadcastOn) {\n      this.broadcastOn.presence(channel, callback);\n    }\n  }\n\n  /**\n   * Get to receive status information from a channel or a set of channels through a callback\n   *\n   * @param {string|[string]} channel\n   * @param callback\n   */\n  getStatus(channel, callback) {\n    if (this.broadcastOn) {\n      this.broadcastOn.status(channel, callback);\n    }\n  }\n\n  /**\n   * Get to receive error information from PubNub Service through a callback\n   *\n   * @param callback\n   */\n  getError(callback) {\n    if (this.broadcastOn) {\n      this.broadcastOn.error(callback);\n    }\n  }\n\n  /**\n   * Clean the stack of messages for a channel or a set of channels\n   *\n   * @param {string|[string]} channel\n   */\n  clean(channel) {\n    this.outputOn.clean(channel);\n  }\n\n  /**\n   * Get the PubNub instance wrapped or throw an exception if this is not instanced yet\n   *\n   * @returns {PubNub|*|null}\n   */\n  getOriginalInstance() {\n    if (this.pubnubInstance) {\n      return this.pubnubInstance;\n    } else {\n      throw new ReferenceError('Pubnub default instance is not initialized yet. Invoke #init() method first.');\n    }\n  }\n\n  /**\n   * Wrap a PubNub's attribute\n   *\n   * @param {string} attributeName\n   */\n  wrapAttribute(attributeName) {\n    Object.defineProperty(this, attributeName, {\n      get: function () {\n        return this.getOriginalInstance()[attributeName];\n      }\n    });\n  }\n\n  /**\n   * Wrap a PubNub's method\n   *\n   * @param methodName\n   */\n  wrapMethod(methodName) {\n    this[methodName] = function () {\n      return this.getOriginalInstance()[methodName].apply(this, arguments);\n    };\n  }\n}\n"]}